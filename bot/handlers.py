from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from bot.database import (
    check_user_exists, add_user, update_user_name, add_task, get_user_tasks,
    close_task, update_task_deadline
)
from datetime import datetime
import asyncio
from bot.keyboards import MAIN_REPLY_MARKUP, ADD_TASK_REMINDER_MARKUP, INPUT_TASK_MARKUP

async def delete_message_safe(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except Exception:
        return False

async def send_with_main_keyboard(context, chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    return await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=MAIN_REPLY_MARKUP
    )

async def delete_message_after_delay(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    await asyncio.sleep(delay)
    await delete_message_safe(context, chat_id, message_id)

async def show_tasks_list(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if 'last_tasks_message_id' in context.user_data:
        await delete_message_safe(context, chat_id, context.user_data['last_tasks_message_id'])
        context.user_data.pop('last_tasks_message_id', None)
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if 'delete_task_timer' in context.user_data:
        context.user_data['delete_task_timer'].cancel()
    
    tasks = get_user_tasks(user_id)
    if tasks:
        tasks_text = "\n".join(
            f"{i+1}) {task[1]} - {task[2].strftime('%d.%m.%Y %H:%M') if task[2] else '–ë–µ–∑ —Å—Ä–æ–∫–∞'}"
            for i, task in enumerate(tasks)
        )
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text=f"üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{tasks_text}",
            reply_markup=MAIN_REPLY_MARKUP
        )
    else:
        msg = await send_with_main_keyboard(context, chat_id, "–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data['last_tasks_message_id'] = msg.message_id
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    delete_task = asyncio.create_task(
        delete_message_after_delay(context, chat_id, msg.message_id, 120)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å
    context.user_data['delete_task_timer'] = delete_task

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.message.from_user.id
    telegram_tag = update.message.from_user.username or "No tag"
    
    if not check_user_exists(user_id):
        add_user(user_id, f"@{telegram_tag}" if telegram_tag != "No tag" else telegram_tag)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        context.user_data['waiting_for_name'] = True
    else:
        await send_with_main_keyboard(context, update.message.chat_id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    text = update.message.text
    chat_id = update.message.chat_id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('waiting_for_name'):
        if text == "–û—Ç–º–µ–Ω–∞":
            await send_with_main_keyboard(context, chat_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            context.user_data.pop('waiting_for_name', None)
            return
            
        name = text.strip()
        update_user_name(user_id, name)
        await send_with_main_keyboard(context, chat_id, f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢–µ–ø–µ—Ä—å —è —Ç–µ–±—è –∑–Ω–∞—é.")
        context.user_data.pop('waiting_for_name', None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –ó–∞–¥–∞—á–∏"
    if text == "–ú–æ–∏ –ó–∞–¥–∞—á–∏":
        await show_tasks_list(context, chat_id, user_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    if text == "–û—Ç–º–µ–Ω–∞" and not context.user_data.get('waiting_for_task'):
        await send_with_main_keyboard(context, chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        context.user_data['waiting_for_task'] = True
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å",
            reply_markup=INPUT_TASK_MARKUP
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
    if text == "–û—Ç–º–µ–Ω–∞" and context.user_data.get('waiting_for_task'):
        context.user_data.pop('waiting_for_task', None)
        await send_with_main_keyboard(context, chat_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    if context.user_data.get('waiting_for_task'):
        context.user_data['task_text'] = text
        context.user_data.pop('waiting_for_task', None)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ù—É–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
            reply_markup=ADD_TASK_REMINDER_MARKUP
        )
        context.user_data['waiting_for_reminder_choice'] = True
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    if text == "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" and context.user_data.get('waiting_for_reminder_choice'):
        add_task(user_id, context.user_data['task_text'])
        
        msg = await send_with_main_keyboard(context, chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        asyncio.create_task(delete_message_after_delay(context, chat_id, msg.message_id, 3))
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('task_text', None)
        context.user_data.pop('waiting_for_reminder_choice', None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É"
    if text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É" and context.user_data.get('waiting_for_reminder_choice'):
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:30)",
            reply_markup=INPUT_TASK_MARKUP
        )
        context.user_data.pop('waiting_for_reminder_choice', None)
        context.user_data['waiting_for_dedline'] = True
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    if context.user_data.get('waiting_for_dedline'):
        if text == "–û—Ç–º–µ–Ω–∞":
            await send_with_main_keyboard(context, chat_id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            context.user_data.pop('waiting_for_dedline', None)
            context.user_data.pop('task_text', None)
            return
            
        try:
            dedline = datetime.strptime(text, "%d.%m.%Y %H:%M")
            add_task(user_id, context.user_data['task_text'], dedline)
            
            msg = await send_with_main_keyboard(context, chat_id, "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            asyncio.create_task(delete_message_after_delay(context, chat_id, msg.message_id, 3))
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('task_text', None)
            context.user_data.pop('waiting_for_dedline', None)
                
        except ValueError:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:30)",
                reply_markup=INPUT_TASK_MARKUP
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏
    if context.user_data.get('waiting_for_reschedule'):
        if text == "–û—Ç–º–µ–Ω–∞":
            await send_with_main_keyboard(context, chat_id, "–ü–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω")
            context.user_data.pop('waiting_for_reschedule', None)
            context.user_data.pop('current_task_id', None)
            return
            
        try:
            task_id = context.user_data.get('current_task_id')
            new_deadline = datetime.strptime(text, "%d.%m.%Y %H:%M")
            
            if task_id and update_task_deadline(task_id, new_deadline):
                msg = await send_with_main_keyboard(
                    context, chat_id, 
                    f"‚úÖ –°—Ä–æ–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ {new_deadline.strftime('%d.%m.%Y %H:%M')}"
                )
                asyncio.create_task(delete_message_after_delay(context, chat_id, msg.message_id, 3))
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('current_task_id', None)
            context.user_data.pop('waiting_for_reschedule', None)
                
        except ValueError:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:30)",
                reply_markup=INPUT_TASK_MARKUP
            )
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await send_with_main_keyboard(context, chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    message_id = query.message.message_id

    try:
        context.user_data['bot_message_id'] = message_id

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏–∑ inline-–∫–Ω–æ–ø–∫–∏)
        if query.data == "no_reminder":
            add_task(user_id, context.user_data['task_text'])
            await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            await send_with_main_keyboard(context, chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for key in ['task_text', 'waiting_for_reminder_choice', 'bot_message_id']:
                context.user_data.pop(key, None)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏
        elif query.data == "close_task":
            task_id = context.user_data.get('current_task_id')
            if task_id and close_task(task_id):
                await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞")
                await send_with_main_keyboard(context, chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            context.user_data.pop('current_task_id', None)

        # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏
        elif query.data == "reschedule_task":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            context.user_data['waiting_for_reschedule'] = True
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        await send_with_main_keyboard(context, chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    if update and update.message:
        await send_with_main_keyboard(context, update.message.chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def setup_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_error_handler(error_handler)