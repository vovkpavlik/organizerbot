from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from bot.database import (
    check_user_exists, add_user, update_user_name, add_task, get_user_tasks,
    get_due_tasks, close_task, update_task_deadline
)
from bot.keyboards import (
    MAIN_MENU, BACK_TO_MENU, REMINDER_CHOICE,
    TASK_ACTIONS, RESCHEDULE_CONFIRM
)
from datetime import datetime
import asyncio

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    telegram_tag = update.message.from_user.username
    telegram_tag = f"@{telegram_tag}" if telegram_tag else "No tag"

    if not check_user_exists(user_id):
        add_user(user_id, telegram_tag)
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        context.user_data['waiting_for_name'] = True
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?",
            reply_markup=MAIN_MENU
        )

# –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ, —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –º–µ–Ω—é
async def replace_task_added_message(context: ContextTypes.DEFAULT_TYPE, chat_id, message_id):
    await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=MAIN_MENU
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    chat_id = update.message.chat_id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('waiting_for_name'):
        name = text.strip()
        update_user_name(user_id, name)
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢–µ–ø–µ—Ä—å —è —Ç–µ–±—è –∑–Ω–∞—é. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?",
            reply_markup=MAIN_MENU
        )
        context.user_data['waiting_for_name'] = False
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    if context.user_data.get('waiting_for_task'):
        context.user_data['task_text'] = text
        await update.message.delete()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'bot_message_id' in context.user_data:
            try:
                await context.bot.delete_message(chat_id, context.user_data['bot_message_id'])
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        sent_message = await context.bot.send_message(
            chat_id=chat_id,
            text="–ù—É–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
            reply_markup=REMINDER_CHOICE
        )
        context.user_data['bot_message_id'] = sent_message.message_id
        context.user_data['waiting_for_task'] = False
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    if context.user_data.get('waiting_for_dedline'):
        try:
            dedline = datetime.strptime(text, "%d.%m.%Y %H:%M")
            await update.message.delete()
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'bot_message_id' in context.user_data:
                try:
                    await context.bot.delete_message(chat_id, context.user_data['bot_message_id'])
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
            add_task(user_id, context.user_data['task_text'], dedline)
            sent_message = await context.bot.send_message(
                chat_id=chat_id,
                text="‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                reply_markup=MAIN_MENU
            )
            context.user_data['last_menu_message_id'] = sent_message.message_id
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            # if hasattr(context, 'job_queue') and context.job_queue:
            #     context.job_queue.run_once(
            #         lambda ctx: asyncio.create_task(replace_task_added_message(ctx, chat_id, sent_message.message_id)), # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
            #         300
            #     )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # for key in ['task_text', 'waiting_for_dedline', 'bot_message_id']:
            #     context.user_data.pop(key, None)
                
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:30)"
            )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–¥–∞—á–∏
    if context.user_data.get('waiting_for_reschedule'):
        try:
            task_id = context.user_data.get('current_task_id')
            new_deadline = datetime.strptime(text, "%d.%m.%Y %H:%M")
            
            if task_id and update_task_deadline(task_id, new_deadline):
                await update.message.delete()
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'bot_message_id' in context.user_data:
                    try:
                        await context.bot.delete_message(chat_id, context.user_data['bot_message_id'])
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–∞
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ –°—Ä–æ–∫ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ {new_deadline.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=MAIN_MENU
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏",
                    reply_markup=MAIN_MENU
                )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for key in ['current_task_id', 'waiting_for_reschedule', 'bot_message_id']:
                context.user_data.pop(key, None)
                
        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:30)"
            )
        return

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    message_id = query.message.message_id

    try:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        if query.data == "add_task":
            context.user_data['bot_message_id'] = message_id
            await query.edit_message_text(
                "–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å",
                reply_markup=BACK_TO_MENU
            )
            context.user_data['waiting_for_task'] = True

        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        elif query.data == "my_tasks":
            tasks = get_user_tasks(user_id)
            if tasks:
                tasks_text = "\n".join(
                    f"{i+1}) {task[1]} - {task[2].strftime('%d.%m.%Y %H:%M') if task[2] else '–ë–µ–∑ —Å—Ä–æ–∫–∞'}"
                    for i, task in enumerate(tasks)
                )
                await query.edit_message_text(
                    f"üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{tasks_text}",
                    reply_markup=BACK_TO_MENU
                )
            else:
                await query.edit_message_text(
                    "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á",
                    reply_markup=BACK_TO_MENU
                )

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif query.data == "back_to_menu":
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=MAIN_MENU
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        elif query.data == "no_reminder":
            add_task(user_id, context.user_data['task_text'])
            await query.edit_message_text( # –ñ–¥–µ–º –ø–æ–∫–∞ —é–∑–µ—Ä –Ω–∞–ø–∏—à–µ—Ç –∑–∞–¥–∞—á—É
                "‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                reply_markup=MAIN_MENU  # –í—ã–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
            )
            context.user_data['last_menu_message_id'] = message_id  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            # if hasattr(context, 'job_queue') and context.job_queue:
            #     context.job_queue.run_once(
            #         lambda ctx: asyncio.create_task(replace_task_added_message(ctx, chat_id, message_id)),
            #         300
            #     )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # context.user_data.pop('task_text', None)
            # context.user_data.pop('bot_message_id', None)

        # –ó–∞–ø—Ä–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        elif query.data == "set_reminder":
            await query.edit_message_text(
                "–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12.2025 15:30)",
                reply_markup=BACK_TO_MENU
            )
            context.user_data['waiting_for_dedline'] = True
            context.user_data['bot_message_id'] = message_id

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏
        elif query.data == "close_task":
            task_id = context.user_data.get('current_task_id')
            if task_id and close_task(task_id):
                await query.edit_message_text(
                    "‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞",
                    reply_markup=MAIN_MENU
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É",
                    reply_markup=MAIN_MENU
                )
            context.user_data.pop('current_task_id', None)

        # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏
        elif query.data == "reschedule_task":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:",
                reply_markup=RESCHEDULE_CONFIRM
            )
            context.user_data['waiting_for_reschedule'] = True
            context.user_data['bot_message_id'] = message_id

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=MAIN_MENU
        )

handlers = [
    CommandHandler("start", start),
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
    CallbackQueryHandler(handle_callback),
]